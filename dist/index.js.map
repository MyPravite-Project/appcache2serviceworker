{"version":3,"sources":["index.js"],"names":[],"mappings":";;AAAA,IAAI,aAAa,GAAG,OAAO,CAAC,yBAAyB,CAAC,CAAC;AACvD,IAAI,UAAU,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC;AAC5C,IAAI,UAAU,GAAG,OAAO,CAAC,oBAAoB,CAAC,CAAC;;AAE/C,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;;AAE3B,UAAU,CAAC,cAAc,CAAC,MAAM,EAAE,UAAS,GAAG,EAAE;AAC9C,SAAO,IAAI,UAAU,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC;CACxE,CAAC,CAAC;;AAEH,SAAS,sBAAsB,CAAC,KAAK,EAE/B;0CAAJ,EAAE;;8BADF,WAAW;MAAX,WAAW,oCAAG,UAAU;;AAExB,MAAI,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACtC,MAAI,eAAe,GAAG,WAAW,GAAG,UAAU,GAAG,OAAO,CAAC;AACzD,MAAI,QAAQ,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC;AACpC,MAAI,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,UAAC,GAAG,EAAE,CAAC;WAAK,CAAC,GAAG,EAAE,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;GAAA,CAAC,CAAC;AAC9F,MAAI,WAAW,GAAG,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,UAAA,GAAG;WAAI,GAAG,IAAI,GAAG;GAAA,CAAC,CAAC;AAC7D,MAAI,oBAAoB,GAAG,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;;AAE/D,MAAI,EAAE,GAAG,UAAU,CAAC;AAClB,eAAW,EAAX,WAAW;AACX,mBAAe,EAAE,WAAW,GAAG,UAAU,GAAG,OAAO;AACnD,aAAS,EAAT,SAAS;AACT,iBAAa,EAAE,QAAQ,CAAC,KAAK;AAC7B,eAAW,EAAX,WAAW;AACX,wBAAoB,EAApB,oBAAoB;AACpB,kBAAc,EAAE,QAAQ,CAAC,KAAK,CAAC,MAAM,IAAI,SAAS,CAAC,MAAM;GAC1D,CAAC,CAAC;;AAEH,SAAO,EAAE,CAAC;CACX;;AAED,MAAM,CAAC,OAAO,GAAG,sBAAsB,CAAC","file":"index.js","sourcesContent":["var parseManifest = require('parse-appcache-manifest');\nvar swTemplate = require('./serviceworker');\nvar Handlebars = require('handlebars/runtime');\n// Avoiding the full crypto lib, as that's huge\nvar sha1 = require('sha1');\n\nHandlebars.registerHelper('json', function(val) {\n  return new Handlebars.SafeString(JSON.stringify(val, undefined, '  '));\n});\n\nfunction appcache2ServiceWorker(input, {\n  cachePrefix = 'siteName'\n}={}) {\n  var version = sha1(input).slice(0, 7);\n  var staticCacheName = cachePrefix + '-static-' + version;\n  var manifest = parseManifest(input);\n  var fallbacks = Object.keys(manifest.fallback).map((key, i) => [key, manifest.fallback[key]]);\n  var networkOnly = manifest.network.filter(url => url != '*');\n  var allowNetworkFallback = manifest.network.indexOf('*') != -1;\n\n  var js = swTemplate({\n    cachePrefix,\n    staticCacheName: cachePrefix + '-static-' + version,\n    fallbacks,\n    explicitCache: manifest.cache,\n    networkOnly,\n    allowNetworkFallback,\n    hasCachedItems: manifest.cache.length || fallbacks.length\n  });\n\n  return js;\n}\n\nmodule.exports = appcache2ServiceWorker;"],"sourceRoot":"/source/"}